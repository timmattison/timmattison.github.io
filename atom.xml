<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tim Mattison]]></title>
  <link href="http://blog.timmattison.com/atom.xml" rel="self"/>
  <link href="http://blog.timmattison.com/"/>
  <updated>2014-09-26T07:15:13-04:00</updated>
  <id>http://blog.timmattison.com/</id>
  <author>
    <name><![CDATA[Tim Mattison]]></name>
    <email><![CDATA[tim (at) mattison (dot) org]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hacking Together a Super Simple Webserver With Netcat on a Raspberry Pi]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/17/hacking-together-a-super-simple-webserver-with-netcat-on-a-raspberry-pi/"/>
    <updated>2014-09-17T08:08:38-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/17/hacking-together-a-super-simple-webserver-with-netcat-on-a-raspberry-pi</id>
    <content type="html"><![CDATA[<p>A few months ago I wanted to get some data out of <a href="http://www.itwatchdogs.com/climate-monitor-weathergoose-ii-p1.html">WeatherGoose II Climate Monitor</a> so I could convert it into JSON and consume it in another application.  I hacked something together and converted their format to JSON in a few hours as a proof-of-concept and the code sat for a few months.</p>

<p>A co-worker recently asked me if they could hook up to my script with a browser to try to do some visualization.  I didn&rsquo;t want to install Apache or nginx as a front end and I didn&rsquo;t want to modify the script to run its own webserver so I came up with a one-liner that uses netcat to get the output of my script into their browser.</p>

<p>But wait!  netcat has an option for this.  However, on the Raspberry Pi it is not available and I didn&rsquo;t want to start downloading new versions.</p>

<p>Here it is:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">SCRIPT=&quot;./weathergoose.py 192.168.1.99&quot; &amp;&amp; PORT=&quot;8080&quot; &amp;&amp; while true; do $SCRIPT | nc -l -p $PORT; done</span>
</span></code></pre></td></tr></table></div></figure>


<p>You&rsquo;ll need to set <code>SCRIPT</code> to the script you want to run (including any parameters it needs) and <code>PORT</code> to the port you want to listen on.</p>

<p>Be careful!  This is not a real webserver.  This just spits your scripts output back to the browser.  Anything the browser sends to the script is ignored.</p>

<p>Also, the script runs first and pipes its output to netcat.  This happens before netcat accepts a connection and can cause some confusion.  Here&rsquo;s a concrete example.</p>

<p>Assume I wrote a script that just returns the time.  If I use the above snippet and start it at 5:00 PM but I hit it with my web browser at 5:15 PM the time that I get back will be 5:00 PM.  The next time I hit it it will be 5:15 PM.  The easiest way to think about it is that you get the data from when the script started or at the time of the <em>previous</em> request, whichever is later.</p>

<p>I hope to come up with a fix for this issue but I haven&rsquo;t had the time yet.  Do you have a fix?  Does this work for you?  Post in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The First Bitcoin Transaction]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/12/the-first-bitcoin-transaction/"/>
    <updated>2014-09-12T18:35:01-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/12/the-first-bitcoin-transaction</id>
    <content type="html"><![CDATA[<p><link rel="stylesheet" type="text/css" href="http://blog.timmattison.com/javascripts/libs/hexpile/Hexpile.css" /></p>

<script type="text/javascript" language="javascript" src="http://blog.timmattison.com/javascripts/libs/hexpile/Hexpile.nocache.js"></script>


<p>Want to understand how Bitcoin transactions work?  Follow my next couple of posts for step-by-step explanations of what is going on behind the scenes.</p>

<p>NOTE: These posts are going to be extremely technical.</p>

<p>In this post I&rsquo;m going to explain the very first Bitcoin transaction in excruciating detail.  The first Bitcoin transaction is not the first block ever mined.  The first Bitcoin transaction occurred in block 170 when the first Bitcoins were transferred from one address to another.</p>

<p>Each Bitcoin block contains transactions.  The first transaction is called the coinbase and is a transaction that actually mines/creates new Bitcoins.  All transactions after that are some kind of balance transfer from a set of addresses to another set of addresses.</p>

<p>Here is the <a href="https://blockchain.info/tx/f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16">first, non-mining transaction from block 170</a>:</p>

<div id="hexpile_tx_f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16">
<pre>
Version number: 01000000

Input counter: 01
Input script #0: c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704000000004847304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d090147304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901ffffffff

Output counter: 02
Output script #0: 00ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac
Output script #1: 00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000
</pre>
</div>


<div id="hexpile_tx_f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16_output"></div>


<p>Version number is the little endian representation of the version number of this transaction.  Future transactions in a different format could have a different version number so they can be processed in new ways.</p>

<p>Input counter tells us that we should expect 1 input.</p>

<p>Input script #0 contains all the bytes in our input script.</p>

<p>Output coutner tells us that we should expect 2 outputs.</p>

<p>Output scripts #0 and #1 contain all the bytes in the two output scripts in this transaction.  These outputs show where the Bitcoins are going.  In this case they&rsquo;re being sent to two different addresses.</p>

<p>The two output scripts split the input coins so that 40 BTC goes to one wallet and 10 BTC goes to another wallet but I&rsquo;ll explain that later.</p>

<p>Let&rsquo;s look at the input first.</p>

<div id="hexpile_tx_f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16_input_0">
<pre>
Previous transaction hash: c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704
Previous output index: 00000000
Length: 0x48
VIRTUAL_OP_PUSH: 0x47
Bytes to push: 304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901
Sequence number: ffffffff
</pre>
</div>


<div id="hexpile_tx_f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16_input_0_output"></div>


<p>Previous transaction hash tells us where to find the transaction that this input is working on.  This transaction hash refers to the coinbase in <a href="https://blockchain.info/tx/0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9">block 9</a> which mined 50 BTC.</p>

<p>Previous output index tells us which output script in the transaction we should apply this input script to.  In this transaction in block 9 there was only one output.</p>

<p>Length tells us the number of bytes that are coming up in our input script.  In this case it is <code>0x48</code> or 72 bytes.</p>

<p>Now we&rsquo;re at the actual input script.  This input script consists of a single operation (<code>VIRTUAL_OP_PUSH</code>) which pushes a 71 byte value onto the stack.  That 71 byte value is a signature that signs the previous output and the new output so that we make sure know that the person unlocking the coins is the same person spending the coins.</p>

<p>The really interesting part is how we do the transaction validation.  That requires a lot of explanation&hellip; as if this wasn&rsquo;t long and complicated enough already.</p>

<p>Let&rsquo;s look at the output script from block 9:</p>

<div id="hexpile_tx_0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9_output_0">
<pre>
VIRTUAL_OP_PUSH: 0x41
Bytes to push: 0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3
OP_CHECKSIG: 0xac
</pre>
</div>


<div id="hexpile_tx_0437cd7f8525ceed2324359c2d0ba26006d92d856a9c20fa0241106ee5a597c9_output_0_output"></div>


<p>This script pushes a value onto the stack (which happens to be a public key) and the calls <code>OP_CHECKSIG</code>.  This is called a <a href="https://en.bitcoin.it/wiki/Script#Obsolete_pay-to-pubkey_transaction">pay-to-pubkey transaction</a>.  Simply it says that anyone who can create a signed transaction with a certain public key can spend this output.</p>

<p><code>OP_CHECKSIG</code> does four things:</p>

<ol>
<li>Pops a value off of the stack and calls it the public key</li>
<li>Pops a value off of the stack and calls it the signature</li>
<li>Grabs data from the previous transaction and the current transaction and combines it in a particular way</li>
<li>Computes and checks that the data from step #3 matches the public key and signature from steps #1 and #2</li>
</ol>


<p>Now we concatenate the input and output scripts into one larger script and get this:</p>

<div id="hexpile_validation_script">
<pre>
VIRTUAL_OP_PUSH - 71 bytes: 0x47
Signature from block 170: 304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901

VIRTUAL_OP_PUSH - 65 bytes: 0x41
Public key from block 9: 0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3

OP_CHECKSIG: ac
</pre>
</div>


<div id="hexpile_validation_script_output"></div>


<p>This is the most straightforward part of the process.  We are pushing the data from the input script from block 170 and then pushing the data from the output script from block 9 and executing <code>OP_CHECKSIG</code>.  This ordering makes sure that the person that originally had the Bitcoins maintains control over the final execution.  Otherwise it would be possible for an attacker to just dump everything off of the stack except for a final value of 1 which would unlock the coins.</p>

<p>When the Bitcoin state machine sees <code>OP_CHECKSIG</code> then the real work begins.</p>

<p>From above we know we pop the public key off of the stack and then pop the signature off of the stack.  Now we need to understand step #3 where we find the data that we&rsquo;re checking the signature of.</p>

<p>Step 1 &ndash; Get a copy of the previous transaction script data/output transaction script data (<code>VIRTUAL_OP_PUSH</code> and <code>OP_CHECKSIG</code>) which will be</p>

<div id="hexpile_step_1">
<pre>
VIRTUAL_OP_PUSH: 0x41
Bytes to push: 0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3
OP_CHECKSIG: 0xac
</pre>
</div>


<div id="hexpile_step_1_output"></div>


<p>We will refer to this as our &ldquo;new input script&rdquo;.</p>

<p>Step 2 &ndash; Get a copy of the current transaction (again, <a href="https://blockchain.info/tx/f4184fc596403b9d638783cf57adfe4c75c605f6356fbc91338530e9831e9e16">from block 170</a>)</p>

<div id="hexpile_step_2">
<pre>
Current transaction: 0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704000000004847304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901ffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000
</pre>
</div>


<div id="hexpile_step_2_output"></div>


<p>Step 3 &ndash; Clear out all of the inputs&#8217; script data from this transaction</p>

<p>Before:</p>

<div id="hexpile_step_3a">
<pre>
:0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd370400000000
Section to remove: 4847304402204e45e16932b8af514961a1d3a1a25fdf3f4f7732e9d624c6c61548ab5fb8cd410220181522ec8eca07de4860a4acdd12909d831cc56cbbac4622082221a8768d1d0901
:ffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000
</pre>
</div>


<div id="hexpile_step_3a_output"></div>


<p>After:</p>

<div id="hexpile_step_3b">
<pre>
:0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd370400000000
NULL placeholder: 00
:ffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000
</pre>
</div>


<div id="hexpile_step_3b_output"></div>


<p>The &ldquo;after&rdquo; block translates to:</p>

<div id="hexpile_step_3c">
<pre>
Version number: 01000000
Input counter: 01

Remaining data from input #0: c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd37040000000000ffffffff

Output counter: 02
Output script #0: 00ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac

Output script #1: 00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000
</pre>
</div>


<div id="hexpile_step_3c_output"></div>


<p>Step 4 &ndash; Now remove all of the OP_CODESEPARATORS from the new input script.  In block 170 there aren&rsquo;t any of them so the new input script doesn&rsquo;t change.</p>

<p>Step 5 &ndash; Put the new input script into the signing data at the current input number.  In step #3 this means the new input script goes where the NULL placeholder was.  This yields:</p>

<div id="hexpile_step_5">
<pre>
:0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd37040000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3acffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000
</pre>
</div>


<div id="hexpile_step_5_output"></div>


<p>Which translates to:</p>

<div id="hexpile_step_5_detail">
<pre>
Version number: 01000000
Input counter: 01
Previous transaction hash: c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd3704
Previous output index: 00000000
Input script length: 0x43
VIRTUAL_OP_PUSH Input #0: 0x41
Bytes to push Input #0: 0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3
OP_CHECKSIG: 0xac
Sequence number: ffffffff

Value bytes: 00ca9a3b00000000
Output script length: 0x43
VIRTUAL_OP_PUSH Output #0: 0x41
Bytes to push Output #0: 04ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84c
OP_CHECKSIG: 0xac

Value bytes: 00286bee00000000
Output script length: 0x43
VIRTUAL_OP_PUSH Output #1: 0x41
Bytes to push Output #1: 0411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3
OP_CHECKSIG: 0xac
Lock time: 00000000
</pre>
</div>


<div id="hexpile_step_5_detail_output"></div>


<p>Step 6 &ndash; Add the 32-bit little endian representation of the hash type onto the end of the signing data.  The hash type is the last byte of the signature which is <code>0x01</code> in this case.  Expanded into a 32-bit little endian value makes it <code>0x01000000</code>.  So our final data that needs to be signed is:</p>

<div id="hexpile_step_6">
<pre>
:0100000001c997a5e56e104102fa209c6a852dd90660a20b2d9c352423edce25857fcd37040000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3acffffffff0200ca9a3b00000000434104ae1a62fe09c5f51b13905f07f06b99a2f7159b2225f374cd378d71302fa28414e7aab37397f554a7df5f142c21c1b7303b8a0626f1baded5c72a704f7e6cd84cac00286bee0000000043410411db93e1dcdb8a016b49840f8c53bc1eb68a382e97b1482ecad7b148a6909a5cb2e0eaddfb84ccf9744464f82e160bfa9b8b64f9d4c03f999b8643f656b412a3ac00000000
Hash type: 01000000
</pre>
</div>


<div id="hexpile_step_6_output"></div>


<p>If the signature from block 170 is a valid signature for this blob of binary data we just created, using the public key from block 9, then the transaction is valid.</p>

<p>Questions?  Comments?  Post below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rid Yourself of Smart Quotes, Smart Dashes, and Automatic Spelling Correction on Mac OS]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/04/rid-yourself-of-smart-quotes-smart-dashes-and-automatic-spelling-correction-on-mac-os/"/>
    <updated>2014-09-04T08:45:12-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/04/rid-yourself-of-smart-quotes-smart-dashes-and-automatic-spelling-correction-on-mac-os</id>
    <content type="html"><![CDATA[<p>Have you ever pasted working a bash script or piece of code into a text editor and had it fail to work when you copied it back out later?  You&rsquo;ve probably fallen victim to smart quotes, smart dashes, or automatic spelling correction.</p>

<p>For example, during development I write scripts in Evernote and two very common things happen:</p>

<ul>
<li><code>aws</code> is persistently and annoyingly replaced by the word &ldquo;was&rdquo;</li>
<li>Commands that include double or single quotes have those quotes replaced with scripting hostile quotes that shells don&rsquo;t understand</li>
</ul>


<p>In Mac OS we can fix this in a few steps:</p>

<ol>
<li>Open System Preferences and click on Keyboard <img src="images/smart-quotes-mac-os/step-1.png" alt="Keyboard" /></li>
<li>Click &ldquo;Text&rdquo; <img src="images/smart-quotes-mac-os/step-2.png" alt="Keyboard" /></li>
<li>Uncheck &ldquo;Use smart quotes and dashes&rdquo; <img src="images/smart-quotes-mac-os/step-3.png" alt="Keyboard" /></li>
<li>Uncheck &ldquo;Correct spelling automatically&rdquo; <img src="images/smart-quotes-mac-os/step-4.png" alt="Keyboard" /></li>
</ol>


<p>You&rsquo;re done!  Now your settings should look like this and these &ldquo;smart&rdquo; features will never bother you again:</p>

<p><img src="images/smart-quotes-mac-os/step-5.png" alt="Keyboard" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using SSH Agent to Simplify Connecting to EC2]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/04/using-ssh-agent-to-simplify-connecting-to-ec2/"/>
    <updated>2014-09-04T08:00:41-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/04/using-ssh-agent-to-simplify-connecting-to-ec2</id>
    <content type="html"><![CDATA[<p>TL;DR &ndash; Jump to the bottom and look for the <code>eval $(ssh-agent)</code> snippet!</p>

<p>Once you start using EC2 you&rsquo;ll probably need to do a lot of things that involve SSH.  A common frustration is having to specify your identity file when connecting to your EC2 instance.  Instead of doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">ssh ubuntu@my-ec2-instance</span>
</span></code></pre></td></tr></table></div></figure>


<p>You end up doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">ssh -i ~/.ssh/identity-file.pem ubuntu@my-ec2-instance</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gets even more complex when tools based on SSH are brought into the mix.  Some of these tools don&rsquo;t have a mechanism to even specify the identity file.  If they do sometimes it makes the command-line really ugly and it almost always makes the script custom to a specific user.  For example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rsync -avz -e &quot;ssh -p1234  -i /home/username/.ssh/identity-file.pem&quot; ...</span>
</span></code></pre></td></tr></table></div></figure>


<p>Is only going to work for the user <code>username</code>.</p>

<p>How do we make this a lot easier?  It turns out there is a very simple way to make all of that pain go away.  Whether you use <a href="http://rsync.samba.org/">rsync</a>, <a href="http://www.cis.upenn.edu/~bcpierce/unison/">unison</a>, <a href="https://mosh.mit.edu/">mosh</a>, scp, or any of a number of other tools that make use of SSH under the hood there is a standard mechanism for SSH to manage your identity.  That mechanism is called <a href="http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/ssh-agent.1?query=ssh-agent&amp;sec=1">ssh-agent</a>.</p>

<p>If I try to rsync directly to my EC2 instance I get this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">$</span> rsync -avzP ubuntu@my-ec2-instance:file-on-ec2.txt <span class="nb">local</span>-file.txt
</span><span class='line'><span class="go">Permission denied (publickey).</span>
</span><span class='line'><span class="go">rsync: connection unexpectedly closed (0 bytes received so far) [Receiver]</span>
</span><span class='line'><span class="go">rsync error: unexplained error (code 255) at io.c(226) [Receiver=3.1.1]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Instead what I want to do is start the ssh-agent, tell it about my identity file, and have the agent worry about providing my identity file when necessary.  To do that I do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">eval $(ssh-agent) &amp;&amp; ssh-add ~/.ssh/identity-file.pem</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you do that SSH will use that identity file to connect to EC2 automatically.  You just need to run that in each shell you are using to connect to EC2 and you are set.</p>

<p>Do you have more than one identity file?  You can keep running ssh-add with additional identity files and it will manage them all.</p>

<p>Do you want to be really lazy and load all of your identities at once?  Try this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">eval $(ssh-agent) &amp;&amp; ssh-add ~/.ssh/*.pem</span>
</span></code></pre></td></tr></table></div></figure>


<p>Enjoy!</p>

<p>NOTE: Your pem files need to have the permission set to 400 so they can only be read by your user and not written to.  Otherwise ssh-agent and ssh may refuse to use them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Full Example Code Showing How to Use Guice and Jetty]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/02/full-example-code-showing-how-to-use-guice-and-jetty/"/>
    <updated>2014-09-02T14:34:11-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/02/full-example-code-showing-how-to-use-guice-and-jetty</id>
    <content type="html"><![CDATA[<p>Today I spent a significant amount of time wrestling Jetty and Guice in order to get a very simple configuration up and running.  Many articles I found on this topic are incomplete or out of date so here is a start to finish example of how to get Guice and Jetty working together without <em>any</em> web.xml.</p>

<p>Step 1 &ndash; Create a module that describes your servlet configuration.  Assume we have three servlets.  One is called FooServlet and is served on the &ldquo;/foo&rdquo; path.  One is called BarServlet and is served on the &ldquo;/bar&rdquo; path.  One is called IndexServlet and is served for all other paths.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.google.inject.servlet.ServletModule</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApplicationServletModule</span> <span class="kd">extends</span> <span class="n">ServletModule</span> <span class="o">{</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configureServlets</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">bind</span><span class="o">(</span><span class="n">FooServlet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bind</span><span class="o">(</span><span class="n">BarServlet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">bind</span><span class="o">(</span><span class="n">IndexServlet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">serve</span><span class="o">(</span><span class="s">&quot;/foo&quot;</span><span class="o">).</span><span class="na">with</span><span class="o">(</span><span class="n">FooServlet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">serve</span><span class="o">(</span><span class="s">&quot;/bar&quot;</span><span class="o">).</span><span class="na">with</span><span class="o">(</span><span class="n">BarServlet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>        <span class="n">serve</span><span class="o">(</span><span class="s">&quot;/*&quot;</span><span class="o">).</span><span class="na">with</span><span class="o">(</span><span class="n">IndexServlet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step 2 &ndash; Create a module that contains your Guice bindings.  We&rsquo;ll assume you have something called NonServletImplementation you want bound to NonServletInterface that you&rsquo;ll need to have injected into your servlets.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.google.inject.AbstractModule</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NonServletModule</span> <span class="kd">extends</span> <span class="n">AbstractModule</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">bind</span><span class="o">(</span><span class="n">NonServletInterface</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">to</span><span class="o">(</span><span class="n">NonServletImplementation</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step 3 &ndash; Instantiate your injector with all of your modules in the code where you want to create the server.  If you have other modules you want to include you should include those as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">NonServletModule</span> <span class="n">nonServletModule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NonServletModule</span><span class="o">();</span>
</span><span class='line'><span class="n">ApplicationServletModule</span> <span class="n">applicationServletModule</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ApplicationServletModule</span><span class="o">();</span>
</span><span class='line'><span class="n">Injector</span> <span class="n">injector</span> <span class="o">=</span> <span class="n">Guice</span><span class="o">.</span><span class="na">createInjector</span><span class="o">(</span><span class="n">nonServletModule</span><span class="o">,</span> <span class="n">applicationServletModule</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step 4 &ndash; Instantiate the server.  You do not need to pass it the injector explicitly.  Guice will handle that for you but you MUST instantiate the injector before this code runs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kt">int</span> <span class="n">port</span> <span class="o">=</span> <span class="mi">8080</span><span class="o">;</span>
</span><span class='line'><span class="n">Server</span> <span class="n">server</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Server</span><span class="o">(</span><span class="n">port</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">ServletContextHandler</span> <span class="n">servletContextHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServletContextHandler</span><span class="o">(</span><span class="n">server</span><span class="o">,</span> <span class="s">&quot;/&quot;</span><span class="o">,</span> <span class="n">ServletContextHandler</span><span class="o">.</span><span class="na">SESSIONS</span><span class="o">);</span>
</span><span class='line'><span class="n">servletContextHandler</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="n">GuiceFilter</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;/*&quot;</span><span class="o">,</span> <span class="n">EnumSet</span><span class="o">.</span><span class="na">allOf</span><span class="o">(</span><span class="n">DispatcherType</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// You MUST add DefaultServlet or your server will always return 404s</span>
</span><span class='line'><span class="n">servletContextHandler</span><span class="o">.</span><span class="na">addServlet</span><span class="o">(</span><span class="n">DefaultServlet</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="s">&quot;/&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Start the server</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Wait until the server exits</span>
</span><span class='line'><span class="n">server</span><span class="o">.</span><span class="na">join</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Step 5 &ndash; Make sure your servlets are setup to use Guice and use the <code>@Singleton</code> annotation.  Only the FooServlet skeleton is shown here but you should create the BarServlet and the IndexServlet as well.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.inject.Singleton</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.ServletException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServlet</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by timmattison on 8/4/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="nd">@Singleton</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FooServlet</span> <span class="kd">extends</span> <span class="n">HttpServlet</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">NonServletInterface</span> <span class="n">nonServletInterface</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">DescribeServlet</span><span class="o">(</span><span class="n">NonServletInterface</span> <span class="n">nonServletInterface</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">nonServletInterface</span> <span class="o">=</span> <span class="n">nonServletInterface</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doPost</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Do whatever you need to do with POSTs</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doGet</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Do whatever you need to do with GETs</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If all goes well then everything will be wired up with Guice and your Jetty server is ready to rock.  It turns out to be a lot simpler than working with the web.xml in my opinion since everything is mapped out explicitly in one place.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Amazon STS Credentials Inside of a Properties File]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/02/using-amazon-sts-credentials-inside-of-a-properties-file/"/>
    <updated>2014-09-02T13:02:53-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/02/using-amazon-sts-credentials-inside-of-a-properties-file</id>
    <content type="html"><![CDATA[<p>Amazon provides several credentials providers in their Java API that let you use IAM user credentials various ways.  The credentials can come from IMDS, environment variables, or a properties file, just to name a few.</p>

<p>If you&rsquo;re developing and debugging and you need to use STS credentials your options are a bit more limited.  To help deal with this I came up with a few bits of code that, for me at least, make it significantly easier.</p>

<p>First, there&rsquo;s an <code>awscredentials.properties</code> file format you need to follow that looks like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>aws.accessKeyId=XXXXXXXXXXXXXXXXXXX
</span><span class='line'>aws.secretAccessKey=YYYYYYYYYYYYYYYYYYY
</span><span class='line'>aws.sessionToken=ZZZZZZZZZZZZZZZZZZZ</span></code></pre></td></tr></table></div></figure>


<p>Replace the X, Y, and Z strings with your credentials and put them in your resources directory where the classloader can find them.  <strong><em>DO NOT COMMIT THEM TO SOURCE CONTROL!</em></strong></p>

<p>Next, there&rsquo;s a method that loads these credentials into the system properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">AWSCREDENTIALS_PROPERTIES</span> <span class="o">=</span> <span class="s">&quot;awscredentials.properties&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">loadAwsCredentialsProperties</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>  <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">().</span><span class="na">getResourceAsStream</span><span class="o">(</span><span class="n">AWSCREDENTIALS_PROPERTIES</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// Was there a properties file?</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">(</span><span class="n">inputStream</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// No, just return</span>
</span><span class='line'>      <span class="k">return</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="n">Properties</span> <span class="n">properties</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Properties</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperties</span><span class="o">());</span>
</span><span class='line'>  <span class="n">properties</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// set the system properties</span>
</span><span class='line'>  <span class="n">System</span><span class="o">.</span><span class="na">setProperties</span><span class="o">(</span><span class="n">properties</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, there&rsquo;s the credentials provider:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.AmazonClientException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSCredentials</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSCredentialsProvider</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.auth.BasicSessionCredentials</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.services.securitytoken.model.Credentials</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.util.StringUtils</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by timmattison on 9/2/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SystemPropertiesStsCredentialsProvider</span> <span class="kd">implements</span> <span class="n">AWSCredentialsProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">ACCESS_KEY_ID_SYSTEM_PROPERTY</span> <span class="o">=</span> <span class="s">&quot;aws.accessKeyId&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SECRET_ACCESS_KEY_SYSTEM_PROPERTY</span> <span class="o">=</span> <span class="s">&quot;aws.secretAccessKey&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">SESSION_TOKEN_SYSTEM_PROPERTY</span> <span class="o">=</span> <span class="s">&quot;aws.sessionToken&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AWSCredentials</span> <span class="nf">getCredentials</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Get the access key ID</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">accessKeyId</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">trim</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">ACCESS_KEY_ID_SYSTEM_PROPERTY</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Get the secret access key</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">secretAccessKey</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">trim</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">SECRET_ACCESS_KEY_SYSTEM_PROPERTY</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Get the session token</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">sessionToken</span> <span class="o">=</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">trim</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">SESSION_TOKEN_SYSTEM_PROPERTY</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Are we missing any of the necessary values?</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">StringUtils</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">accessKeyId</span><span class="o">)</span>
</span><span class='line'>                <span class="o">||</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">secretAccessKey</span><span class="o">)</span>
</span><span class='line'>                <span class="o">||</span> <span class="n">StringUtils</span><span class="o">.</span><span class="na">isNullOrEmpty</span><span class="o">(</span><span class="n">sessionToken</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Yes, throw an exception like the Amazon code does</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AmazonClientException</span><span class="o">(</span>
</span><span class='line'>                    <span class="s">&quot;Unable to load AWS credentials from Java system &quot;</span>
</span><span class='line'>                            <span class="o">+</span> <span class="s">&quot;properties (&quot;</span> <span class="o">+</span> <span class="n">ACCESS_KEY_ID_SYSTEM_PROPERTY</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span>
</span><span class='line'>                            <span class="o">+</span> <span class="n">SECRET_ACCESS_KEY_SYSTEM_PROPERTY</span> <span class="o">+</span> <span class="s">&quot;, and &quot;</span>
</span><span class='line'>                            <span class="o">+</span> <span class="n">SESSION_TOKEN_SYSTEM_PROPERTY</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Create the credentials</span>
</span><span class='line'>        <span class="n">Credentials</span> <span class="n">sessionCredentials</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Credentials</span><span class="o">();</span>
</span><span class='line'>        <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">setAccessKeyId</span><span class="o">(</span><span class="n">accessKeyId</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">setSecretAccessKey</span><span class="o">(</span><span class="n">secretAccessKey</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">setSessionToken</span><span class="o">(</span><span class="n">sessionToken</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Convert them to basic session credentials</span>
</span><span class='line'>        <span class="n">BasicSessionCredentials</span> <span class="n">basicSessionCredentials</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicSessionCredentials</span><span class="o">(</span>
</span><span class='line'>                <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">getAccessKeyId</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">getSecretAccessKey</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">getSessionToken</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">basicSessionCredentials</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">refresh</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Do nothing</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This should make things quite a bit easier if you don&rsquo;t have access to a real IAM user and must use STS for your application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Simple Snippets for Using AWS Credentials While Debugging]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/02/simple-snippets-for-using-aws-credentials-while-debugging/"/>
    <updated>2014-09-02T11:28:42-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/02/simple-snippets-for-using-aws-credentials-while-debugging</id>
    <content type="html"><![CDATA[<p>While debugging and developing using the AWS SDK you&rsquo;ll find that sometimes you just need to use real credentials on a box that lives outside of EC2.  You should always be using <a href="http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AESDG-chapter-instancedata.html">Instance Metadata</a> for your credentials inside of EC2 though.  Never use this pattern inside EC2!</p>

<p>Also, make sure you never commit your credentials.  That can be an expensive mistake when they show up on Github and people snag them to use them for Bitcoin mining.</p>

<p><strong>NOTE:</strong> These snippets include <code>@Inject</code> and <code>@Assisted</code> annotations used by <a href="https://github.com/google/guice">Guice</a>.  If you&rsquo;re not using Guice remove those and the related imports.</p>

<p>Anyway, if you want to use static IAM user credentials you can use a credentials provider like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSCredentials</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSCredentialsProvider</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.inject.Inject</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.inject.assistedinject.Assisted</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by timmattison on 9/2/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TempNonStsCredentialsProvider</span> <span class="kd">implements</span> <span class="n">AWSCredentialsProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">awsAccessKeyId</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">awsSecretKey</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TempNonStsCredentialsProvider</span><span class="o">(</span><span class="nd">@Assisted</span><span class="o">(</span><span class="s">&quot;awsAccessKeyId&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">awsAccessKeyId</span><span class="o">,</span>
</span><span class='line'>                                         <span class="nd">@Assisted</span><span class="o">(</span><span class="s">&quot;awsSecretKey&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">awsSecretKey</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">awsAccessKeyId</span> <span class="o">=</span> <span class="n">awsAccessKeyId</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">awsSecretKey</span> <span class="o">=</span> <span class="n">awsSecretKey</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AWSCredentials</span> <span class="nf">getCredentials</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nf">AWSCredentials</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAWSAccessKeyId</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">awsAccessKeyId</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="nd">@Override</span>
</span><span class='line'>            <span class="kd">public</span> <span class="n">String</span> <span class="nf">getAWSSecretKey</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">awsSecretKey</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">};</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">refresh</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Do nothing</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pass in your credentials and you&rsquo;re good to go.  If you&rsquo;re using <a href="http://docs.aws.amazon.com/STS/latest/APIReference/Welcome.html">STS</a> it requires a little bit more work.  Use this instead:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSCredentials</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.auth.AWSCredentialsProvider</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.auth.BasicSessionCredentials</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.amazonaws.services.securitytoken.model.Credentials</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">com.google.inject.assistedinject.Assisted</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by timmattison on 9/2/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TempStsCredentialsProvider</span> <span class="kd">implements</span> <span class="n">AWSCredentialsProvider</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">awsAccessKeyId</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">awsSecretAccessKey</span><span class="o">;</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">awsSessionToken</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">TempStsCredentialsProvider</span><span class="o">(</span><span class="nd">@Assisted</span><span class="o">(</span><span class="s">&quot;awsAccessKeyId&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">awsAccessKeyId</span><span class="o">,</span>
</span><span class='line'>                                      <span class="nd">@Assisted</span><span class="o">(</span><span class="s">&quot;awsSecretAccessKey&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">awsSecretAccessKey</span><span class="o">,</span>
</span><span class='line'>                                      <span class="nd">@Assisted</span><span class="o">(</span><span class="s">&quot;awsSessionToken&quot;</span><span class="o">)</span> <span class="n">String</span> <span class="n">awsSessionToken</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">awsAccessKeyId</span> <span class="o">=</span> <span class="n">awsAccessKeyId</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">awsSecretAccessKey</span> <span class="o">=</span> <span class="n">awsSecretAccessKey</span><span class="o">;</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">awsSessionToken</span> <span class="o">=</span> <span class="n">awsSessionToken</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">AWSCredentials</span> <span class="nf">getCredentials</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Credentials</span> <span class="n">sessionCredentials</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Credentials</span><span class="o">();</span>
</span><span class='line'>        <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">setAccessKeyId</span><span class="o">(</span><span class="n">awsAccessKeyId</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">setSecretAccessKey</span><span class="o">(</span><span class="n">awsSecretAccessKey</span><span class="o">);</span>
</span><span class='line'>        <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">setSessionToken</span><span class="o">(</span><span class="n">awsSessionToken</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">BasicSessionCredentials</span> <span class="n">basicSessionCredentials</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BasicSessionCredentials</span><span class="o">(</span>
</span><span class='line'>                <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">getAccessKeyId</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">getSecretAccessKey</span><span class="o">(),</span>
</span><span class='line'>                <span class="n">sessionCredentials</span><span class="o">.</span><span class="na">getSessionToken</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">basicSessionCredentials</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">refresh</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>      <span class="c1">// Do nothing</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you just need to pass in the extra session token parameter and then you can use this to provide credentials to your AWS calls.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking PostgreSQL to See if an Index Already Exists]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/02/checking-postgresql-to-see-if-an-index-already-exists/"/>
    <updated>2014-09-02T08:16:01-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/02/checking-postgresql-to-see-if-an-index-already-exists</id>
    <content type="html"><![CDATA[<p>In <a href="http://blog.timmattison.com/archives/2014/09/02/checking-postgresql-to-see-if-a-constraint-already-exists/">my last post</a> I showed you a simple way to check to see if a constraint already existed in PostgreSQL.  Now I want to show you how to do the same thing for an index.</p>

<p>Here&rsquo;s the code but keep in mind that it makes the assumption that everything is in the <code>public</code> schema.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='plpgsql'><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">create_index_if_not_exists</span> <span class="p">(</span><span class="n">t_name</span> <span class="nb">text</span><span class="p">,</span> <span class="n">i_name</span> <span class="nb">text</span><span class="p">,</span> <span class="n">index_sql</span> <span class="nb">text</span><span class="p">)</span> <span class="k">RETURNS</span> <span class="nb">void</span> <span class="k">AS</span> <span class="s">$$</span>
</span><span class='line'><span class="k">DECLARE</span>
</span><span class='line'>  <span class="n">full_index_name</span> <span class="nb">varchar</span><span class="p">;</span>
</span><span class='line'>  <span class="n">schema_name</span> <span class="nb">varchar</span><span class="p">;</span>
</span><span class='line'><span class="k">BEGIN</span>
</span><span class='line'>
</span><span class='line'><span class="n">full_index_name</span> <span class="o">=</span> <span class="n">t_name</span> <span class="o">||</span> <span class="s1">&#39;_&#39;</span> <span class="o">||</span> <span class="n">i_name</span><span class="p">;</span>
</span><span class='line'><span class="n">schema_name</span> <span class="o">=</span> <span class="s1">&#39;public&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">SELECT</span> <span class="mf">1</span>
</span><span class='line'>    <span class="k">FROM</span>   <span class="n">pg_class</span> <span class="n">c</span>
</span><span class='line'>    <span class="k">JOIN</span>   <span class="n">pg_namespace</span> <span class="n">n</span> <span class="k">ON</span> <span class="n">n</span><span class="mf">.</span><span class="n">oid</span> <span class="o">=</span> <span class="n">c</span><span class="mf">.</span><span class="n">relnamespace</span>
</span><span class='line'>    <span class="k">WHERE</span>  <span class="n">c</span><span class="mf">.</span><span class="n">relname</span> <span class="o">=</span> <span class="n">full_index_name</span>
</span><span class='line'>    <span class="k">AND</span>    <span class="n">n</span><span class="mf">.</span><span class="n">nspname</span> <span class="o">=</span> <span class="n">schema_name</span>
</span><span class='line'>    <span class="p">)</span> <span class="k">THEN</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">execute</span> <span class="s1">&#39;CREATE INDEX &#39;</span> <span class="o">||</span> <span class="n">full_index_name</span> <span class="o">||</span> <span class="s1">&#39; ON &#39;</span> <span class="o">||</span> <span class="n">schema_name</span> <span class="o">||</span> <span class="s1">&#39;.&#39;</span> <span class="o">||</span> <span class="n">t_name</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="n">index_sql</span><span class="p">;</span>
</span><span class='line'><span class="k">END</span> <span class="k">IF</span><span class="p">;</span>
</span><span class='line'><span class="k">END</span>
</span><span class='line'><span class="s">$$</span>
</span><span class='line'><span class="k">LANGUAGE</span> <span class="n">plpgsql</span> <span class="k">VOLATILE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can now use the function like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='postgres'><span class='line'><span class="k">SELECT</span> <span class="n">create_index_if_not_exists</span><span class="p">(</span><span class="s1">&#39;table&#39;</span><span class="p">,</span> <span class="s1">&#39;index_name&#39;</span><span class="p">,</span> <span class="s1">&#39;(column)&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>No duplicated data, no exceptions.  Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Checking PostgreSQL to See if a Constraint Already Exists]]></title>
    <link href="http://blog.timmattison.com/archives/2014/09/02/checking-postgresql-to-see-if-a-constraint-already-exists/"/>
    <updated>2014-09-02T08:01:00-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/09/02/checking-postgresql-to-see-if-a-constraint-already-exists</id>
    <content type="html"><![CDATA[<p>Checking to see if a constraint already exists should be easy.  H2 and many other database have syntax for it.</p>

<p>For some reason PostgreSQL, my favorite database, doesn&rsquo;t have this.  I looked around and found <a href="https://stackoverflow.com/questions/6801919/postgres-add-constraint-if-it-doesnt-already-exist?answertab=votes#tab-top">a decent solution on Stack Overflow</a> that I can add to my default template but something about it bothered me.</p>

<p>I didn&rsquo;t like the fact that the code asked for the table name and constraint name but then didn&rsquo;t use it in the SQL statement.  Leaving it like this means that someone could write this (note that foo becomes foo2 and bar becomes bar2 in the first two parameters):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='postgres'><span class='line'><span class="k">SELECT</span> <span class="n">create_constraint_if_not_exists</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;ALTER TABLE foo ADD CONSTRAINT bar CHECK (foobies &lt; 100);&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="n">create_constraint_if_not_exists</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;foo2&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;bar2&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;ALTER TABLE foo ADD CONSTRAINT bar CHECK (foobies &lt; 100);&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And they would get an exception rather than having the constraint creation be skipped which could break a lot of things that expect this function to be safe.</p>

<p>They also could do this (note that foo becomes foo2 and bar becomes bar2 in the constraint SQL):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='postgres'><span class='line'><span class="k">SELECT</span> <span class="n">create_constraint_if_not_exists</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;ALTER TABLE foo ADD CONSTRAINT bar CHECK (foobies &lt; 100);&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="n">create_constraint_if_not_exists</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;foo&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;bar&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;ALTER TABLE foo2 ADD CONSTRAINT bar2 CHECK (foobies &lt; 100);&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This could be even worse because a constraint wouldn&rsquo;t be created.</p>

<p>My solution was to modify this script slightly:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='plpgsql'><span class='line'><span class="k">CREATE</span> <span class="k">OR</span> <span class="k">REPLACE</span> <span class="k">FUNCTION</span> <span class="n">create_constraint_if_not_exists</span> <span class="p">(</span><span class="n">t_name</span> <span class="nb">text</span><span class="p">,</span> <span class="n">c_name</span> <span class="nb">text</span><span class="p">,</span> <span class="n">constraint_sql</span> <span class="nb">text</span><span class="p">)</span>
</span><span class='line'>  <span class="k">RETURNS</span> <span class="nb">void</span>
</span><span class='line'><span class="k">AS</span>
</span><span class='line'><span class="s">$BODY$</span>
</span><span class='line'>  <span class="k">begin</span>
</span><span class='line'>    <span class="c1">-- Look for our constraint</span>
</span><span class='line'>    <span class="k">if</span> <span class="k">not</span> <span class="k">exists</span> <span class="p">(</span><span class="k">select</span> <span class="n">constraint_name</span>
</span><span class='line'>                   <span class="k">from</span> <span class="n">information_schema</span><span class="mf">.</span><span class="n">constraint_column_usage</span>
</span><span class='line'>                   <span class="k">where</span> <span class="n">table_name</span> <span class="o">=</span> <span class="n">t_name</span>  <span class="k">and</span> <span class="n">constraint_name</span> <span class="o">=</span> <span class="n">c_name</span><span class="p">)</span> <span class="k">then</span>
</span><span class='line'>        <span class="k">execute</span> <span class="s1">&#39;ALTER TABLE &#39;</span> <span class="o">||</span> <span class="n">t_name</span> <span class="o">||</span> <span class="s1">&#39; ADD CONSTRAINT &#39;</span> <span class="o">||</span> <span class="n">c_name</span> <span class="o">||</span> <span class="s1">&#39; &#39;</span> <span class="o">||</span> <span class="n">constraint_sql</span><span class="p">;</span>
</span><span class='line'>    <span class="k">end</span> <span class="k">if</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span><span class="p">;</span>
</span><span class='line'><span class="s">$BODY$</span>
</span><span class='line'><span class="k">LANGUAGE</span> <span class="n">plpgsql</span> <span class="k">VOLATILE</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you call it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='postgres'><span class='line'><span class="k">SELECT</span> <span class="n">create_constraint_if_not_exists</span><span class="p">(</span><span class="s1">&#39;foo&#39;</span><span class="p">,</span> <span class="s1">&#39;bar&#39;</span><span class="p">,</span> <span class="s1">&#39;CHECK (foobies &lt; 100);&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And it will check the constraint properly by name.  This doesn&rsquo;t stop you from creating multiple constraints with the same criteria and different names though.  That&rsquo;s something you&rsquo;ll need to check for manually (for now).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deal With os_linux_zero.cpp Related JVM Crashes Without Using the Oracle JVM]]></title>
    <link href="http://blog.timmattison.com/archives/2014/08/29/deal-with-os-linux-zero-dot-cpp-related-jvm-crashes-without-using-the-oracle-jvm/"/>
    <updated>2014-08-29T12:39:51-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/08/29/deal-with-os-linux-zero-dot-cpp-related-jvm-crashes-without-using-the-oracle-jvm</id>
    <content type="html"><![CDATA[<p>While running some relatively simple Java code on my Raspberry Pi I kept running into complete JVM crashes.  These weren&rsquo;t simple application crashes that I can quickly debug.  It really was the JVM that my code was running on that was crashing.</p>

<p>The error message I received was similar to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="gp">#</span>
</span><span class='line'><span class="gp">#</span> A fatal error has been detected by the Java Runtime Environment:
</span><span class='line'><span class="gp">#</span>
</span><span class='line'><span class="gp">#</span>  Internal Error <span class="o">(</span>os_linux_zero.cpp:285<span class="o">)</span>, <span class="nv">pid</span><span class="o">=</span>10344, <span class="nv">tid</span><span class="o">=</span>3061261424
</span><span class='line'><span class="gp">#</span>  fatal error: caught unhandled signal 11
</span><span class='line'><span class="gp">#</span>
</span><span class='line'><span class="gp">#</span> JRE version: OpenJDK Runtime Environment <span class="o">(</span>7.0_65-b32<span class="o">)</span> <span class="o">(</span>build 1.7.0_65-b32<span class="o">)</span>
</span><span class='line'><span class="gp">#</span> Java VM: OpenJDK Zero VM <span class="o">(</span>24.65-b04 mixed mode linux-arm <span class="o">)</span>
</span><span class='line'><span class="gp">#</span> Failed to write core dump. Core dumps have been disabled. To <span class="nb">enable </span>core dumping, try <span class="s2">&quot;ulimit -c unlimited&quot;</span> before starting Java again
</span><span class='line'><span class="gp">#</span>
</span><span class='line'><span class="gp">#</span> An error report file with more information is saved as:
</span><span class='line'><span class="gp">#</span> /home/pi/hs_err_pid10344.log
</span><span class='line'><span class="gp">#</span>
</span><span class='line'><span class="gp">#</span> If you would like to submit a bug report, please include
</span><span class='line'><span class="gp">#</span> instructions on how to reproduce the bug and visit:
</span><span class='line'><span class="gp">#</span>   http://icedtea.classpath.org/bugzilla
</span><span class='line'><span class="gp">#</span>
</span><span class='line'><span class="go">Aborted</span>
</span></code></pre></td></tr></table></div></figure>


<p>I dug and dug and dug and couldn&rsquo;t figure out what was going on.  The most common fix that I saw was to switch to the Oracle JVM.  For this project I didn&rsquo;t want to do that so I scoured the net and came up with the following two options.</p>

<p>For reference, my original command line was very simple.  It was just <code>java -jar test.jar</code>.</p>

<p>NOTE: There may be performance issues with both of these options.  I have not profiled them to see the difference.  Then again, having your JVM crash can arguably be the lowest performance option possible.</p>

<p>Option 1: Add the <code>-XX:+PrintCommandLineFlags</code> option to your command line.  This changed my command line to <code>java -XX:+PrintCommandLineFlags -jar test.jar</code>.  Immediately the problem went away.</p>

<p>Option 2: Add the <code>-jamvm</code> option to your command line.  This changed my command line to <code>java -jamvm -jar test.jar</code>.  Again, immediately the problem went away</p>

<p>What is really happening behind the scenes?  That gets complex quickly and I still don&rsquo;t know the full answer.  It turns out that this is a known but ignored bug in OpenJDK&rsquo;s Zero VM.  When you run <code>java -version</code> you can see if you&rsquo;re running Zero VM or not like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">pi@raspberrypi ~ $ java -version</span>
</span><span class='line'><span class="go">java version &quot;1.7.0_65&quot;</span>
</span><span class='line'><span class="go">OpenJDK Runtime Environment (IcedTea 2.5.1) (7u65-2.5.1-2~deb7u1+rpi1)</span>
</span><span class='line'><span class="go">OpenJDK Zero VM (build 24.65-b04, mixed mode)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I don&rsquo;t know why option 1 works.  My guess is that that option disables some kind of optimization.  Looking at <a href="http://cr.openjdk.java.net/~gbenson/zero-10/hotspot/src/os_cpu/linux_zero/vm/os_linux_zero.cpp.html">what I think is the corresponding code in Hotspot</a> on line 283 I can see that <code>pthread_attr_getstack</code> is used.  The <a href="http://pubs.opengroup.org/onlinepubs/009695399/functions/pthread_attr_getstack.html">pthread_attr_getstack documentation</a> says that it can only fail with <code>EINVAL</code> for one reason.  It must be that <code>addr</code> &ldquo;does not refer to an initialized thread attribute object&rdquo;.  I don&rsquo;t have any clue how to fix this though.</p>

<p>Option 2 works because it switches over to <a href="http://jamvm.sourceforge.net/">JamVM</a>.  You can check your JamVM version like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">pi@raspberrypi ~ $ java -jamvm -version</span>
</span><span class='line'><span class="go">java version &quot;1.7.0_65&quot;</span>
</span><span class='line'><span class="go">OpenJDK Runtime Environment (IcedTea 2.5.1) (7u65-2.5.1-2~deb7u1+rpi1)</span>
</span><span class='line'><span class="go">JamVM (build 1.6.0-devel, inline-threaded interpreter with stack-caching)</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, if you&rsquo;re in a similar bind and don&rsquo;t want to install and switch to Oracle&rsquo;s JVM give these options a try.  Post your results in the comments below.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making Javascript Logging a Little Less Expensive]]></title>
    <link href="http://blog.timmattison.com/archives/2014/08/29/making-javascript-logging-a-little-less-expensive/"/>
    <updated>2014-08-29T07:54:45-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/08/29/making-javascript-logging-a-little-less-expensive</id>
    <content type="html"><![CDATA[<p>Disclaimer: I am not a Javascript expert.  I don&rsquo;t even play one on TV.</p>

<p>Everybody knows that <a href="http://blog.codinghorror.com/the-problem-with-logging/">logging isn&rsquo;t free</a>, don&rsquo;t they?  Well I don&rsquo;t think that they do and for a lot of beginner to intermediate level developers I can&rsquo;t really fault them for it.  While you&rsquo;re debugging it appears that log messages show up instantly so it is easy to forget that there is in fact a cost associated with producing them.</p>

<p>What is less obvious is that even when you &ldquo;disable&rdquo; your logging it still incurs a cost and that cost may be significantly larger than you think.  The two main issues I&rsquo;ve seen that often cause this large expense are:</p>

<ol>
<li>Methods that generate log messages</li>
<li>Inline generation of strings</li>
</ol>


<p>The first, methods that generate log messages, occurs when you need to do a bit of processing in order to make a meaningful log message.  For example, you might need to know how far you are through a loop so you write a function called <code>generateFormattedProgress</code> that takes the number of loops you&rsquo;re going to go through and the current loop counter as parameters.  <code>generateFormattedProgress</code> generates a tidy little string that might loop like this <code>[8% complete (currently on iteration 80,001 of 1,000,000)]</code>.</p>

<p>The second, inline generation of strings, happens when you need to do something a bit simpler like displaying a loop counter.  You might build a string like this <code>"Loop: " + loop_counter</code> and then log it.</p>

<p>In both of these cases you get bitten by the less obvious issue I mentioned above when you disable logging.  To be completely concrete about this imagine your logger is called like this:</p>

<p>Case #1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">generateFormattedProgress</span><span class="p">(</span><span class="nx">loop_counter</span><span class="p">,</span> <span class="nx">total_loops</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Case #2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Loop:&quot;</span> <span class="o">+</span> <span class="nx">loop_counter</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Even if you replace <code>console.log</code> with a function that just immediately returns you will, in most cases, still be forcing the machine to call <code>generateFormattedProgress</code> and perform the string concatenation only to throw the results away.  This is where the overhead comes in.</p>

<p>Borrowing from some other languages I came up with an idea to reduce this burden.  Unfortunately it is a bit ugly but it does give you a decent performance boost.  The idea is that instead of always calling the logging code at runtime you wrap your logging statements in anonymous functions and pass those to the logger.  The logger can then decide if it needs to run them and if it doesn&rsquo;t then it never calls the code inside of the anonymous function.</p>

<p>Your log statements go from looking like the statements above to statements like this:</p>

<p>Case #1:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="nx">generateFormattedProgress</span><span class="p">(</span><span class="nx">loop_counter</span><span class="p">,</span> <span class="nx">total_loops</span><span class="p">);});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Case #2:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span> <span class="k">return</span> <span class="s2">&quot;Loop:&quot;</span> <span class="o">+</span> <span class="nx">loop_counter</span><span class="p">;</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Some test code is below to illustrate the difference in performance.  On my machine running 100,000 iterations I get the following results in Chrome 37.0.2062.94:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">Console.log enabled</span>
</span><span class='line'><span class="go">Running: test_normal_console</span>
</span><span class='line'><span class="go">Total milliseconds: 1921</span>
</span><span class='line'><span class="go">Milliseconds per log: 0.01921</span>
</span><span class='line'><span class="go">Running: test_anonymous_function_console</span>
</span><span class='line'><span class="go">Total milliseconds: 1917</span>
</span><span class='line'><span class="go">Milliseconds per log: 0.01917</span>
</span><span class='line'><span class="go">Disabling console.log</span>
</span><span class='line'><span class="go">Running: test_normal_console</span>
</span><span class='line'><span class="go">Total milliseconds: 16</span>
</span><span class='line'><span class="go">Milliseconds per log: 0.00016</span>
</span><span class='line'><span class="go">Running: test_anonymous_function_console</span>
</span><span class='line'><span class="go">Total milliseconds: 5</span>
</span><span class='line'><span class="go">Milliseconds per log: 0.00005</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here we see that we cut the runtime by at least two orders of magnitude going from a little over 1.9 seconds for each case to less than 20 milliseconds for each case.  Does logging affect your Javascript application enough to use this pattern?  Is this an anti-pattern?  Are you already doing this or something similar?  Post a message in the comments and lets discuss it!</p>

<p>Sample test code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">test_count</span> <span class="o">=</span> <span class="mi">100000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">get_timestamp</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">write_newline</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;&lt;br/&gt;\n&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">display_function_name</span><span class="p">(</span><span class="nx">caller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">myName</span> <span class="o">=</span> <span class="nx">caller</span><span class="p">.</span><span class="nx">callee</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">myName</span> <span class="o">=</span> <span class="nx">myName</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="s1">&#39;function &#39;</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">myName</span> <span class="o">=</span> <span class="nx">myName</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="nx">myName</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;(&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;Running: &quot;</span> <span class="o">+</span> <span class="nx">myName</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">write_newline</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">show_results</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">stop</span><span class="p">,</span> <span class="nx">count</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">totalMilliseconds</span> <span class="o">=</span> <span class="nx">stop</span> <span class="o">-</span> <span class="nx">start</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">millisecondsPerLog</span> <span class="o">=</span> <span class="nx">totalMilliseconds</span> <span class="o">/</span> <span class="nx">test_count</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;Total milliseconds: &quot;</span> <span class="o">+</span> <span class="nx">totalMilliseconds</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">write_newline</span><span class="p">();</span>
</span><span class='line'>    <span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;Milliseconds per log: &quot;</span> <span class="o">+</span> <span class="nx">millisecondsPerLog</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">write_newline</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">test_normal_console</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">display_function_name</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">get_timestamp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">loop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">loop</span> <span class="o">&lt;</span> <span class="nx">test_count</span><span class="p">;</span> <span class="nx">loop</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;test! &quot;</span> <span class="o">+</span> <span class="nx">loop</span> <span class="o">+</span> <span class="s2">&quot;test!&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">stop</span> <span class="o">=</span> <span class="nx">get_timestamp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">show_results</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">stop</span><span class="p">,</span> <span class="nx">test_count</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">test_anonymous_function_console</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">display_function_name</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">start</span> <span class="o">=</span> <span class="nx">get_timestamp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">loop</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">loop</span> <span class="o">&lt;</span> <span class="nx">test_count</span><span class="p">;</span> <span class="nx">loop</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s2">&quot;test! &quot;</span> <span class="o">+</span> <span class="nx">loop</span> <span class="o">+</span> <span class="s2">&quot;test!&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">stop</span> <span class="o">=</span> <span class="nx">get_timestamp</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">show_results</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">stop</span><span class="p">,</span> <span class="nx">test_count</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Store the original console.log function</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">original_console_log</span> <span class="o">=</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Call this to enable logging</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">enable_console_logging</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">input</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Why the bind(console)(input)?</span>
</span><span class='line'>        <span class="c1">//</span>
</span><span class='line'>        <span class="c1">// console.log expects &quot;this&quot; to refer to the console object or it crashes with an invocation exception</span>
</span><span class='line'>        <span class="c1">//   See: https://stackoverflow.com/questions/8904782/uncaught-typeerror-illegal-invocation-in-javascript</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Is this a function?</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">typeof</span> <span class="nx">input</span> <span class="o">==</span> <span class="s2">&quot;function&quot;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// Yes, call the function to get the data to log to the console</span>
</span><span class='line'>            <span class="nx">original_console_log</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">)(</span><span class="nx">input</span><span class="p">());</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="c1">// No, just log it</span>
</span><span class='line'>            <span class="nx">original_console_log</span><span class="p">.</span><span class="nx">bind</span><span class="p">(</span><span class="nx">console</span><span class="p">)(</span><span class="nx">input</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Call this to disable logging</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">disable_console_logging</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;Console.log enabled&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">write_newline</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">enable_console_logging</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test_normal_console</span><span class="p">();</span>
</span><span class='line'><span class="nx">test_anonymous_function_console</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nb">document</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">&quot;Disabling console.log&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nx">write_newline</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">disable_console_logging</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test_normal_console</span><span class="p">();</span>
</span><span class='line'><span class="nx">test_anonymous_function_console</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Guice Dependency Injection With Quartz Schedulding]]></title>
    <link href="http://blog.timmattison.com/archives/2014/08/05/using-guice-dependency-injection-with-quartz-schedulding/"/>
    <updated>2014-08-05T08:39:34-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/08/05/using-guice-dependency-injection-with-quartz-schedulding</id>
    <content type="html"><![CDATA[<p>I am a big <a href="https://github.com/google/guice">Guice</a> advocate.  I try to use it wherever it is possible and makes sense.  While working on a project yesterday I realized that in order to use Guice and <a href="http://quartz-scheduler.org/">Quartz</a> together you need to add in some glue code.</p>

<p>I <a href="http://codesmell.wordpress.com/2009/01/11/quartz-fits/">found someone who had done the work already</a> but their blog post was from 2009 and the Quartz API had changed a bit.  Their implementation was very close so I made the necessary modifications, tested it out, and it works perfectly.  If you&rsquo;re wondering how to use Guice to get dependency injection into your Quartz scheduler code you can use the two snippets of code below to do it all for you.</p>

<p>The first thing you need is a custom job factory that will create your jobs using Guice.  Here is the <code>GuiceJobFactory</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">com.google.inject.Injector</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.quartz.Job</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.quartz.JobDetail</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.quartz.Scheduler</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.quartz.SchedulerException</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.quartz.spi.JobFactory</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.quartz.spi.TriggerFiredBundle</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">javax.inject.Inject</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * Created by timmattison on 8/4/14.</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="c1">// Some guidance from: http://codesmell.wordpress.com/2009/01/11/quartz-fits/</span>
</span><span class='line'><span class="kd">final</span> <span class="kd">class</span> <span class="nc">GuiceJobFactory</span> <span class="kd">implements</span> <span class="n">JobFactory</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Injector</span> <span class="n">guice</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Inject</span>
</span><span class='line'>    <span class="kd">public</span> <span class="nf">GuiceJobFactory</span><span class="o">(</span><span class="kd">final</span> <span class="n">Injector</span> <span class="n">guice</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">guice</span> <span class="o">=</span> <span class="n">guice</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Job</span> <span class="nf">newJob</span><span class="o">(</span><span class="n">TriggerFiredBundle</span> <span class="n">triggerFiredBundle</span><span class="o">,</span> <span class="n">Scheduler</span> <span class="n">scheduler</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SchedulerException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Get the job detail so we can get the job class</span>
</span><span class='line'>        <span class="n">JobDetail</span> <span class="n">jobDetail</span> <span class="o">=</span> <span class="n">triggerFiredBundle</span><span class="o">.</span><span class="na">getJobDetail</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Class</span> <span class="n">jobClass</span> <span class="o">=</span> <span class="n">jobDetail</span><span class="o">.</span><span class="na">getJobClass</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Get a new instance of that class from Guice so we can do dependency injection</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">Job</span><span class="o">)</span> <span class="n">guice</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">jobClass</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Something went wrong.  Print out the stack trace here so SLF4J doesn&#39;t hide it.</span>
</span><span class='line'>            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Rethrow the exception as an UnsupportedOperationException</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedOperationException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>GuiceJobFactory</code> gets the Guice injector injected into it.  It then overrides the newJob method and creates each job using the injector it was given.</p>

<p>The next thing you need to do is to use this <code>JobFactory</code> in your <code>Scheduler</code>.  Here&rsquo;s how I built my scheduler and used it to create my first job:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Scheduler</span> <span class="n">scheduler</span> <span class="o">=</span> <span class="n">StdSchedulerFactory</span><span class="o">.</span><span class="na">getDefaultScheduler</span><span class="o">();</span>
</span><span class='line'><span class="n">scheduler</span><span class="o">.</span><span class="na">setJobFactory</span><span class="o">(</span><span class="n">injector</span><span class="o">.</span><span class="na">getInstance</span><span class="o">(</span><span class="n">GuiceJobFactory</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>
</span><span class='line'>
</span><span class='line'><span class="n">scheduler</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">JobDetail</span> <span class="n">jobDetail</span> <span class="o">=</span> <span class="n">newJob</span><span class="o">(</span><span class="n">MyJob</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now the <code>JobDetail</code> object will be built from the <code>GuiceJobFactory</code> and it will get all the benefits of Guice&rsquo;s dependency injection.  Enjoy!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fenced Code Blocks in Ordered Lists in Octopress]]></title>
    <link href="http://blog.timmattison.com/archives/2014/07/17/fenced-code-blocks-in-ordered-lists-in-octopress/"/>
    <updated>2014-07-17T06:54:17-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/07/17/fenced-code-blocks-in-ordered-lists-in-octopress</id>
    <content type="html"><![CDATA[<p>While writing an article yesterday I ran into an issue getting fenced code blocks to work in markdown.  I searched around and came across <a href="https://gist.github.com/clintel/1155906">a gist that showed how to do it</a> but I still couldn&rsquo;t get it to work.</p>

<p>It turns out that the parser used in Octopress is slightly different than some of the other parsers out there and treats this markdown differently.  There is <a href="https://github.com/imathis/octopress/issues/488">an issue filed for this</a> but the issue resolution is to use a workaround.</p>

<p>After some experimentation I came up with some simple steps that cover all the scenarios for putting code blocks or formatted text into an ordered list while writing my blog posts.</p>

<p>It is organized so that the two main scenarios include four different snippets of code.  The first snippet of code is put directly before the entire block you want to format.  The second snippet of code is put before each line of code.  The third snippet of code is put after each line of code.  The fourth snippet of code is put at the end of the entire block.</p>

<ol>
<li><p>No line numbers, no syntax highlighting.  I use this when including snippets of commands that I have run from the console.</p>

<ol>
<li>Before the block &ndash; <code>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code&gt;</code></li>
<li>Before each line &ndash; <code>&lt;span class="line”&gt;</code></li>
<li>After each line &ndash; <code>&lt;/span&gt;</code></li>
<li>After the block &ndash; <code>&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</code></li>
</ol>
</li>
<li><p>No line numbers, syntax highlighting.  I use this for regular code if I don&rsquo;t care about line numbers.  Replace <code>LANGUAGE</code> with the language you are using.  For example, <code>c</code> or <code>python</code> (see the <a href="http://pygments.org/docs/lexers/">supported language list</a> for more).</p>

<ol>
<li>Before the block &ndash; <code>&lt;div class="highlight"&gt;&lt;pre&gt;&lt;code class="LANGUAGE"&gt;</code></li>
<li>Before each line &ndash; <code>&lt;span class="line”&gt;</code></li>
<li>After each line &ndash; <code>&lt;/span&gt;</code></li>
<li>After the block &ndash; <code>&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</code></li>
</ol>
</li>
</ol>


<p>If you want to do line numbers when syntax highlighting it gets messy.  You need to build a table to have the line number &ldquo;gutter&rdquo; in there.  You can do it but it is a bit more work.</p>

<p>Line numbers and syntax highlighting:</p>

<ol>
<li><p>Start a table that holds everything.  This is the block you&rsquo;ll use:</p>

<p> <div class="highlight"><pre><code class="html">
 <span class="line">&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&ldquo;gutter&rdquo;&gt;&lt;pre class=&ldquo;line-numbers&rdquo;&gt;</span>
 </code></pre></div></p></li>
<li><p>Determine how many lines are in your code snippet.  Now create a line number row for each of them.  Assuming you have five lines of code that would look like this:</p>

<p> <div class="highlight"><pre><code class="html">
 <span class="line">&lt;span class=&ldquo;line-number&rdquo;&gt;1&lt;/span&gt;</span>
 <span class="line">&lt;span class=&ldquo;line-number&rdquo;&gt;2&lt;/span&gt;</span>
 <span class="line">&lt;span class=&ldquo;line-number&rdquo;&gt;3&lt;/span&gt;</span>
 <span class="line">&lt;span class=&ldquo;line-number&rdquo;&gt;4&lt;/span&gt;</span>
 <span class="line">&lt;span class=&ldquo;line-number&rdquo;&gt;5&lt;/span&gt;</span>
 </code></pre></div></p></li>
<li><p>Close this column of the table and start the column for the code:</p>

<p> <div class="highlight"><pre><code class="html">
 <span class="line">&lt;/pre&gt;&lt;/td&gt;&lt;td class=&ldquo;code&rdquo;&gt;&lt;pre&gt;&lt;code class=&ldquo;LANGUAGE&rdquo;&gt;
 </code></pre></div></p></li>
<li><p>Before each line of code &ndash; <code>&lt;span class="line"&gt;</code></p></li>
<li>After each line of code &ndash; <code>&lt;/span&gt;</code></li>
<li>After the block &ndash; <code>&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</code></li>
</ol>


<p>That should do it.  Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Common Android Wear Tasks for Developers]]></title>
    <link href="http://blog.timmattison.com/archives/2014/07/16/common-android-wear-tasks-for-developers/"/>
    <updated>2014-07-16T06:59:56-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/07/16/common-android-wear-tasks-for-developers</id>
    <content type="html"><![CDATA[<p>Getting started with development on the Android Wear platform can be challenging.  Here are my notes on how to get started quickly.</p>

<p>Before you do anything!
1. Back up your IntelliJ configuration if you use IntelliJ at all.
2. Install Android Studio.  Do NOT try to use IntelliJ to do Android Wear development.</p>

<p>Once you&rsquo;ve got Android Studio installed you&rsquo;ll need to do some setup on your devices (watch and phone) to get them working.  Here I assume you&rsquo;re using physical devices for your phone and your watch, no emulators.</p>

<p><strong>Enabling debugging on your Android Wear device</strong></p>

<p>The first time you set up your watch for remote debugging do the following:</p>

<ol>
<li>Tap your watch face to get the &ldquo;Speak now&rdquo; prompt</li>
<li>Tap the screen again to get the list of options</li>
<li>Scroll down to &ldquo;Settings&rdquo; and tap it</li>
<li>Scroll down to &ldquo;About&rdquo; and tap it.  If you see &ldquo;Developer options&rdquo; in this list already you do not need to do this procedure since it has already been done.</li>
<li>Scroll down to &ldquo;Build number&rdquo; and tap it 7 times.  You should get a message that says &ldquo;You are now a developer!&rdquo;.</li>
<li>Swipe to the right to get the previous menu</li>
<li>Scroll down to &ldquo;Developer options&rdquo; and tap it</li>
<li>Tap &ldquo;ADB debugging&rdquo; if it says it is disabled</li>
<li>Tap &ldquo;Debug over Bluetooth&rdquo; if it says it is disabled</li>
</ol>


<p>After your Android Wear device has been set up once you&rsquo;ll only need to follow these steps to re-enable debugging if you ever disable it:</p>

<ol>
<li>Tap your watch face to get the &ldquo;Speak now&rdquo; prompt</li>
<li>Tap the screen again to get the list of options</li>
<li>Scroll down to &ldquo;Settings&rdquo; and tap it</li>
<li>Scroll down to &ldquo;Developer options&rdquo; and tap it</li>
<li>Tap &ldquo;ADB debugging&rdquo; if it says it is disabled</li>
<li>Tap &ldquo;Debug over Bluetooth&rdquo; if it says it is disabled</li>
</ol>


<p><strong>Enabling debugging over Bluetooth from your Android phone to your Android Wear device</strong></p>

<ol>
<li>Open the &ldquo;Android Wear&rdquo; app</li>
<li><p>Tap the settings icon at the top of the screen (the two gears that look like the icon below)</p>

<p>  <img src="http://blog.timmattison.com/images/android-wear-for-developers/settings-icon.png" alt="two small gears" /></p></li>
<li>Make sure &ldquo;Debugging over Bluetooth&rdquo; is checked</li>
<li>Once it is checked two fields will appear below it.  They are &ldquo;Host&rdquo; and &ldquo;Target&rdquo;.  &ldquo;Target&rdquo; will say &ldquo;connected&rdquo; when your watch is connected to your phone.  &ldquo;Host&rdquo; will say &ldquo;connected&rdquo; when ADB is connected to your watch.</li>
</ol>


<p><strong>Setting up ADB for Android Wear debugging over Bluetooth</strong></p>

<p>Make sure ADB sees your phone:</p>

<ol>
<li>Connect your phone via USB and make sure USB debugging is enabled</li>
<li><p>Run <code>adb devices</code> from the command line.  You should get some output like this:</p>

<p> <div class="highlight"><pre><code>
 <span class="line">$ adb devices</span>
 <span class="line">List of devices attached</span>
 <span class="line">01234567890abcdef    device</span>
 </code></pre></div></p></li>
<li><p>Check to see if there is a device in the list called &ldquo;localhost:4444&rdquo;.  If so, you are already paired and ready to go.  You do not need to do this procedure.</p></li>
<li><p>To connect ADB to your watch run <code>adb forward tcp:4444 localabstract:/adb-hub; adb connect localhost:4444</code> and you should see this:</p>

<p> <div class="highlight"><pre><code>
 <span class="line">$ adb forward tcp:4444 localabstract:/adb-hub; adb connect localhost:4444</span>
 <span class="line">connected to localhost:4444</span>
 </code></pre></div></p></li>
<li><p>Run <code>adb devices</code> again and you should see this:</p>

<p> <div class="highlight"><pre><code>
 <span class="line">$ adb devices</span>
 <span class="line">List of devices attached</span>
 <span class="line">01234567890abcdef    device</span>
 <span class="line">localhost:4444       device</span>
 </code></pre></div></p></li>
<li><p>If you do not see the <code>localhost:4444</code> entry then double check that ADB debugging and Bluetooth debugging are enabled on your watch.  Then check to make sure Bluetooth debugging is enabled in the Android Wear app on your phone.  Once those are verified you can run this command again and it will try to reconnect.</p></li>
</ol>


<p>Now that you&rsquo;ve done all of that Android Studio should give you a dialog like this when you try to run or debug an application:</p>

<p><img src="http://blog.timmattison.com/images/android-wear-for-developers/choose-device-dialog.png" alt="&quot;Choose Device&quot; dialog" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tip: Bringing Your Working Directory (Pwd) to Another Terminal Window in Mac OS]]></title>
    <link href="http://blog.timmattison.com/archives/2014/07/15/tip-bringing-your-working-directory-pwd-to-another-terminal-window-in-mac-os/"/>
    <updated>2014-07-15T18:37:23-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/07/15/tip-bringing-your-working-directory-pwd-to-another-terminal-window-in-mac-os</id>
    <content type="html"><![CDATA[<p>Mac OS, as far as I can remember, used to start tabbed Terminal sessions and put you into the working directory of your last tab.  New Terminal windows didn&rsquo;t do this but recently new Terminal tabs stopped doing it too.</p>

<p>I got tired of renavigating to the paths in the projects I was working on and I didn&rsquo;t want to launch a Terminal from within a Terminal so I came up with something else.  I added a few lines to my <code>.bash_profile</code> and now I have two new commands.  <code>ccd</code> copies your current directory to the clipboard, and <code>pcd</code> pastes your clipboard into the <code>cd</code> command.</p>

<p>Now when I&rsquo;m in a deep directory tree like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>super-dooper-long-path/with/other-path/stuff/in/it $</span></code></pre></td></tr></table></div></figure>


<p>I can do this in the existing Terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>super-dooper-long-path/with/other-path/stuff/in/it $ ccd</span></code></pre></td></tr></table></div></figure>


<p>And this in the new Terminal:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ pcd
</span><span class='line'>super-dooper-long-path/with/other-path/stuff/in/it $</span></code></pre></td></tr></table></div></figure>


<p>And there you have it.  Back into my beloved directory in no time.  Here&rsquo;s what I added to <code>.bash_profile</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">alias </span><span class="nv">ccd</span><span class="o">=</span><span class="s2">&quot;pwd | pbcopy&quot;</span>
</span><span class='line'><span class="nb">alias </span><span class="nv">pcd</span><span class="o">=</span><span class="s2">&quot;paste_cd&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">function </span>paste_cd<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="nb">cd</span> <span class="s2">&quot;`pbpaste`&quot;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>ccd</code> alias just pipes <code>pwd</code> into <code>pbcopy</code>, which is one of the best tools ever, so that it ends up in the clipboard.</p>

<p>The <code>pcd</code> alias is a little more complex.  If you try to do this without a bash function your alias will get evaluated as soon as your shell starts.  This means that when you open your shell whatever is in your clipboard will be what <code>pcd</code> tries to <code>cd</code> to.  Using a function we let it run <code>pbpaste</code> when it is called so it always uses the up-to-date info.</p>

<p>Enjoy!  Let me know if you find it useful!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Automating Cisco Switch Interactions]]></title>
    <link href="http://blog.timmattison.com/archives/2014/06/25/automating-cisco-switch-interactions/"/>
    <updated>2014-06-25T19:03:09-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/06/25/automating-cisco-switch-interactions</id>
    <content type="html"><![CDATA[<p>Recently I needed to find a way to reboot an embedded device remotely.  The trick was that we didn&rsquo;t have a handy <a href="http://www.digital-loggers.com/lpc.html">Web Power Switch</a> and the device was PoE.  I figured that I&rsquo;d just quickly slap together a script to telnet to the switch&rsquo;s management interface and simulate a few simple commands.  To make a long story short SSH was the only option which complicated things a bit.</p>

<p>Fortunately for me <a href="http://blog.timmattison.com/archives/2014/02/13/how-to-execute-a-command-on-a-remote-server-that-requires-you-to-su-or-sudo/">I had already written an article about this</a> but that turned out only to be a starting point as the script just wouldn&rsquo;t work out of the box with Cisco&rsquo;s SSH server.</p>

<p>In the end I found a few very interesting things out about Paramiko and Cisco&rsquo;s SSH server.  Using Paramiko with a Cisco switch through out a bunch of errors like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Traceback (most recent call last):
</span><span class='line'>  File "/Applications/PyCharm.app/helpers/pydev/pydevd.py", line 1733, in &lt;module&gt;
</span><span class='line'>    debugger.run(setup['file'], None, None)
</span><span class='line'>  File "/Applications/PyCharm.app/helpers/pydev/pydevd.py", line 1226, in run
</span><span class='line'>    pydev_imports.execfile(file, globals, locals)  # execute the script
</span><span class='line'>  File "poe-state.py", line 69, in &lt;module&gt;
</span><span class='line'>    client.connect(switch_ip_address, username=username, password=password, look_for_keys=True)
</span><span class='line'>  File "/usr/local/lib/python2.7/site-packages/paramiko/client.py", line 273, in connect
</span><span class='line'>    self._auth(username, password, pkey, key_filenames, allow_agent, look_for_keys)
</span><span class='line'>  File "/usr/local/lib/python2.7/site-packages/paramiko/client.py", line 456, in _auth
</span><span class='line'>    raise saved_exception
</span><span class='line'>paramiko.ssh_exception.AuthenticationException: Authentication failed.</span></code></pre></td></tr></table></div></figure>


<p>If you are seeing <code>Authentication failed</code> messages while using Paramiko and you are certain your credentials are correct you may be running into the same problem I was.  The issue is that Paramiko tries to use your SSH keys to do public key authentication before it tries to use your password.  Normally, this doesn&rsquo;t cause an issue because if it fails one authentication method it just moves onto trying the next authentication method.  Due to a quirk in both Paramiko and Cisco&rsquo;s SSH server implementation Paramiko gets confused after the public key authentication failure and gives up.  I figured this out by turning on full debugging in Paramiko like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>paramiko.common.logging.basicConfig(level=paramiko.common.DEBUG)</span></code></pre></td></tr></table></div></figure>


<p>This is an incredibly handy flag if you ever need to debug Paramiko yourself so keep it around!</p>

<p>Anyway, the solution is normally to add the <code>look_for_keys=False</code> option to your Paramiko connect call.  However, as I found out that works on some systems and not others.  To be certain that it only tried password authentication I needed to also add the <code>allow_agent=False</code> flag.</p>

<p>The other quirk I hit was that my script initially waited forever for a response when I sent it commands that had a lot of output.  This was because the Cisco shell&rsquo;s pager was on.  Turning it off meant sending one additional command <code>terminal length 0\n</code>.</p>

<p>In the end I ended up with a script that lets me check the PoE state of a port and enable/disable PoE on a per port basis.  If you need a script that does that it is included below.  Two important points to remember are that I only needed to use this on interfaces that start with <code>Gi1/0/</code> so that value is hardcoded and you&rsquo;ll need to change it if your switch is different.  You will also need to install my little Python library called <a href="https://pypi.python.org/pypi/pyuda/0.1dev">pyuda</a> because I use it to process the command-line arguments.  Rip that out if you want to simplify things.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/usr/bin/env python</span>
</span><span class='line'>
</span><span class='line'><span class="n">__author__</span> <span class="o">=</span> <span class="s">&#39;timmattison&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">pyuda</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">paramiko</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'>
</span><span class='line'><span class="c"># For debugging only</span>
</span><span class='line'><span class="c"># paramiko.common.logging.basicConfig(level=paramiko.common.DEBUG)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># This is part of the regex we use to look for the interfaces we care about</span>
</span><span class='line'><span class="n">interface_regex</span> <span class="o">=</span> <span class="s">&quot;Gi1\/0\/&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># These are the operation we support</span>
</span><span class='line'><span class="n">status_operation</span> <span class="o">=</span> <span class="s">&quot;status&quot;</span>
</span><span class='line'><span class="n">on_operation</span> <span class="o">=</span> <span class="s">&quot;on&quot;</span>
</span><span class='line'><span class="n">off_operation</span> <span class="o">=</span> <span class="s">&quot;off&quot;</span>
</span><span class='line'><span class="n">valid_operations</span> <span class="o">=</span> <span class="p">[</span><span class="n">status_operation</span><span class="p">,</span> <span class="n">on_operation</span><span class="p">,</span> <span class="n">off_operation</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">send_string_and_wait_for_string</span><span class="p">(</span><span class="n">command</span><span class="p">,</span> <span class="n">wait_string</span><span class="p">,</span> <span class="n">should_print</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Send the su command</span>
</span><span class='line'>    <span class="n">shell</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">command</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Create a new receive buffer</span>
</span><span class='line'>    <span class="n">receive_buffer</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="ow">not</span> <span class="n">wait_string</span> <span class="ow">in</span> <span class="n">receive_buffer</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Flush the receive buffer</span>
</span><span class='line'>        <span class="n">receive_buffer</span> <span class="o">+=</span> <span class="n">shell</span><span class="o">.</span><span class="n">recv</span><span class="p">(</span><span class="mi">1024</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Print the receive buffer, if necessary</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">should_print</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">receive_buffer</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">receive_buffer</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">validate_operation</span><span class="p">(</span><span class="n">operation</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Is this an operation we support?</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="ow">not</span> <span class="n">operation</span> <span class="ow">in</span> <span class="n">valid_operations</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># No, tell them and bail out</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">operation</span> <span class="o">+</span> <span class="s">&quot; is not a valid operation&quot;</span>
</span><span class='line'>        <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Get the command-line arguments</span>
</span><span class='line'><span class="n">switch_ip_address</span><span class="p">,</span> <span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="p">,</span> <span class="n">operation</span><span class="p">,</span> <span class="n">port_number</span> <span class="o">=</span> <span class="n">pyuda</span><span class="o">.</span><span class="n">get_command_line_arguments</span><span class="p">([</span><span class="s">&quot;Switch IP address&quot;</span><span class="p">,</span> <span class="s">&quot;Admin username&quot;</span><span class="p">,</span> <span class="s">&quot;Admin password&quot;</span><span class="p">,</span> <span class="n">status_operation</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">on_operation</span> <span class="o">+</span> <span class="s">&quot;, or &quot;</span> <span class="o">+</span> <span class="n">off_operation</span><span class="p">,</span> <span class="s">&quot;Port number&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure the operation makes sense</span>
</span><span class='line'><span class="n">validate_operation</span><span class="p">(</span><span class="n">operation</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create an SSH client</span>
</span><span class='line'><span class="n">client</span> <span class="o">=</span> <span class="n">paramiko</span><span class="o">.</span><span class="n">SSHClient</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Make sure that we add the remote server&#39;s SSH key automatically</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">set_missing_host_key_policy</span><span class="p">(</span><span class="n">paramiko</span><span class="o">.</span><span class="n">AutoAddPolicy</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Connect to the client</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">switch_ip_address</span><span class="p">,</span> <span class="n">username</span><span class="o">=</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="n">password</span><span class="p">,</span> <span class="n">allow_agent</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">look_for_keys</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Create a raw shell</span>
</span><span class='line'><span class="n">shell</span> <span class="o">=</span> <span class="n">client</span><span class="o">.</span><span class="n">invoke_shell</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Wait for the prompt</span>
</span><span class='line'><span class="n">send_string_and_wait_for_string</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="s">&quot;#&quot;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Disable more</span>
</span><span class='line'><span class="n">send_string_and_wait_for_string</span><span class="p">(</span><span class="s">&quot;terminal length 0</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;#&quot;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Which command are we trying to run?</span>
</span><span class='line'><span class="k">if</span><span class="p">((</span><span class="n">operation</span> <span class="o">==</span> <span class="n">on_operation</span><span class="p">)</span> <span class="ow">or</span> <span class="p">(</span><span class="n">operation</span> <span class="o">==</span> <span class="n">off_operation</span><span class="p">)):</span>
</span><span class='line'>    <span class="c"># Trying to do on or off</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Send the &quot;conf t&quot; command</span>
</span><span class='line'>    <span class="n">send_string_and_wait_for_string</span><span class="p">(</span><span class="s">&quot;conf t</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;(config)#&quot;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Send the interface command</span>
</span><span class='line'>    <span class="n">send_string_and_wait_for_string</span><span class="p">(</span><span class="s">&quot;interface Gi1/0/&quot;</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">port_number</span><span class="p">)</span> <span class="o">+</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;(config-if)#&quot;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Build the power command</span>
</span><span class='line'>    <span class="n">power_command</span> <span class="o">=</span> <span class="s">&quot;power inline &quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># What kind of operation is this?</span>
</span><span class='line'>    <span class="k">if</span><span class="p">(</span><span class="n">operation</span> <span class="o">==</span> <span class="n">off_operation</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># Power off, &quot;never&quot; means off</span>
</span><span class='line'>        <span class="n">power_command</span> <span class="o">+=</span> <span class="s">&quot;never&quot;</span>
</span><span class='line'>    <span class="k">else</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Power on, &quot;auto&quot; means on (there are other options but this is the simplest)</span>
</span><span class='line'>        <span class="n">power_command</span> <span class="o">+=</span> <span class="s">&quot;auto&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Add the carriage return</span>
</span><span class='line'>    <span class="n">power_command</span> <span class="o">+=</span> <span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Send the power command</span>
</span><span class='line'>    <span class="n">send_string_and_wait_for_string</span><span class="p">(</span><span class="n">power_command</span><span class="p">,</span> <span class="s">&quot;(config-if)#&quot;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'><span class="k">elif</span><span class="p">(</span><span class="n">operation</span> <span class="o">==</span> <span class="n">status_operation</span><span class="p">):</span>
</span><span class='line'>    <span class="c"># Get the status of all of the PoE ports</span>
</span><span class='line'>    <span class="n">power_data</span> <span class="o">=</span> <span class="n">send_string_and_wait_for_string</span><span class="p">(</span><span class="s">&quot;show power inline</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="s">&quot;#&quot;</span><span class="p">,</span> <span class="bp">False</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Split the data into lines</span>
</span><span class='line'>    <span class="n">power_data_lines</span> <span class="o">=</span> <span class="n">power_data</span><span class="o">.</span><span class="n">splitlines</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># We haven&#39;t found what we&#39;re looking for yet</span>
</span><span class='line'>    <span class="n">found</span> <span class="o">=</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Loop through all of the lines</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">power_data_line</span> <span class="ow">in</span> <span class="n">power_data_lines</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># Does this look like the interface we want?</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="ow">not</span> <span class="n">re</span><span class="o">.</span><span class="n">match</span><span class="p">(</span><span class="s">&quot;^&quot;</span> <span class="o">+</span> <span class="n">interface_regex</span> <span class="o">+</span> <span class="n">port_number</span> <span class="o">+</span> <span class="s">&quot;\s&quot;</span><span class="p">,</span> <span class="n">power_data_line</span><span class="p">)):</span>
</span><span class='line'>            <span class="c"># No, keep going</span>
</span><span class='line'>            <span class="k">continue</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Found the interface we want, split up the fields</span>
</span><span class='line'>        <span class="n">power_data_fields</span> <span class="o">=</span> <span class="n">power_data_line</span><span class="o">.</span><span class="n">split</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Get the second field which is the power state field and print it</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">power_data_fields</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># We found what we needed</span>
</span><span class='line'>        <span class="n">found</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>        <span class="c"># Get out of the for loop</span>
</span><span class='line'>        <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># Did we find what we needed?</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">found</span><span class="p">:</span>
</span><span class='line'>        <span class="c"># No, let the user know</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&quot;Did not find port &quot;</span> <span class="o">+</span> <span class="n">port_number</span>
</span><span class='line'>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="c"># This is an operation we didn&#39;t handle</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">operation</span> <span class="o">+</span> <span class="s">&quot; not handled&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Close the SSH connection</span>
</span><span class='line'><span class="n">client</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Advanced Port Forwarding With SSH]]></title>
    <link href="http://blog.timmattison.com/archives/2014/06/20/advanced-port-forwarding-with-ssh/"/>
    <updated>2014-06-20T06:38:14-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/06/20/advanced-port-forwarding-with-ssh</id>
    <content type="html"><![CDATA[<p><strong><em>NOTE</em></strong>: This has all been done on a Mac running OS 10.9.  YMMV on other operating systems or versions.</p>

<p>If you&rsquo;ve ever had to use an SSH server as a jump off point, possibly to get to machines that don&rsquo;t have a public IP address, then you know that it can be complicated to set up, manage, and annoying if you need to access a lot of machines and/or a lot of different services.  Typically, using local port forwarding you can do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">ssh -L8080:REMOTE_PRIVATE_SERVER:80 USER@REMOTE_PUBLIC_SERVER</span>
</span></code></pre></td></tr></table></div></figure>


<p>That will let you connect to localhost on port 8080 to get to <code>REMOTE_PRIVATE_SERVER</code>&rsquo;s port 80 service.  What if you needed to get to two services?  You start stacking them up:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">ssh -L8080:REMOTE_PRIVATE_SERVER:80 -L8181:ANOTHER_REMOTE_PRIVATE_SERVER:80 USER@REMOTE_PUBLIC_SERVER</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now you can get to <code>REMOTE_PRIVATE_SERVER</code>&rsquo;s port 80 service and <code>ANOTHER_REMOTE_PRIVATE_SERVER</code>&rsquo;s port 80 service.  You just have to configure your applications to use ports 8080 and 8181 on localhost instead of port 80 on the two remote hosts.</p>

<p>Wouldn&rsquo;t it be nice if you could not worry about re-mapping ports and could just connect to <code>REMOTE_PRIVATE_SERVER</code> and <code>ANOTHER_REMOTE_PRIVATE_SERVER</code> as if they were hosts on your network?  SSH does offer you a way to do this but I have never seen it documented anywhere.  There is <a href="http://www.securitybulletins.com/mediawiki/index.php/SSH_Tunnelling#Using_SSH_to_build_a_Virtual_Private_Network_.28VPN.29">a way to create a VPN using pppd</a> and <a href="http://www.securitybulletins.com/mediawiki/index.php/SSH_Tunnelling#Using_SSH_to_emulate_a_SOCKS_proxy">a way to use SOCKS</a> but those are no fun.  I don&rsquo;t want to use pppd and I have applications that don&rsquo;t support SOCKS.</p>

<p>rsync and other applications that depend on SSH can be particularly tricky.  On top of the command-line options you need to pass to your main application you need to pass options to SSH directly (not so bad), use each applications special syntax to pass those options to SSH (really bad), or convince the application to shell out to the OS with a specific command-line you&rsquo;ve concocted for SSH (also really bad).</p>

<p>Instead, what I do is I make use of the 127.0.0.0/8 address space that is available to everyone but rarely used.  You can always use 127.0.0.1 to access your local machine but you may not realize that you can bind to all of the rest of the addresses in that space.</p>

<p>I need to set up some terminology so this will be easier to discuss.  The machine that you&rsquo;re SSHing will be the &ldquo;source machine&rdquo;.  The machine that is publicly accessible on the remote network that you SSH into will be called the &ldquo;gateway machine&rdquo;.  The machine that provides the remote service that only has a private IP address will be called the &ldquo;destination machine&rdquo;.</p>

<p>My first use case is that the source machine wants to connect to a web server on the destination machine but I want to do it on port 80.  We can do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sudo ifconfig lo0 alias 127.0.0.2</span>
</span><span class='line'><span class="go">sudo ssh -L127.0.0.2:80:DESTINATION_MACHINE:80 user@GATEWAY_MACHINE</span>
</span></code></pre></td></tr></table></div></figure>


<p>That first line creates an alias IP address of <code>127.0.0.2</code> on your <code>lo0</code> interface.  Then we ssh to the gateway machine and port forward the destination machine&rsquo;s port 80 to <code>127.0.0.1</code>.  Since 80 is a privileged port you need to sudo your ssh session.</p>

<p>Now instead of having to point our browser to something like <code>localhost:9000</code> we can point our browser directly to <code>127.0.0.2</code>.  What can we do this to make it even better?  Create a host entry for <code>127.0.0.2</code> that gives it a descriptive name like <code>remote_application_server</code>.</p>

<p>Is that not enough?  How about this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">sudo ifconfig lo0 alias 127.0.0.2</span>
</span><span class='line'><span class="go">sudo ssh -L127.0.0.2:22:DESTINATION_MACHINE:22 user@GATEWAY_MACHINE</span>
</span></code></pre></td></tr></table></div></figure>


<p>All that changed here is the port number.  It was 80 and now it is 22 which is the ssh port.  Now you can ssh to this machine in one step like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">ssh user@127.0.0.2</span>
</span></code></pre></td></tr></table></div></figure>


<p>This also means that you can sftp, scp, and rsync directly to that IP address.  Without this trick to rsync you&rsquo;d need to do something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='console'><span class='line'><span class="go">rsync -rvz -e &#39;ssh -p 2222&#39; ./dir user@host:/dir</span>
</span></code></pre></td></tr></table></div></figure>


<p>It may not seem like much but if you have to do it a lot it can get ugly.  Especially since it is one of those options you always forget since you don&rsquo;t use it that often.</p>

<p>I&rsquo;m thinking about scripting the IP aliasing and port forwarding so that it can be specified in a simple configuration file.  If you&rsquo;re interested in that post in the comments below and let me know!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forcing Java's Logger to Work, Even When It Doesn't Want To]]></title>
    <link href="http://blog.timmattison.com/archives/2014/06/19/forcing-javas-logger-to-work-even-when-it-doesnt-want-to/"/>
    <updated>2014-06-19T18:31:42-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/06/19/forcing-javas-logger-to-work-even-when-it-doesnt-want-to</id>
    <content type="html"><![CDATA[<p>If you do any Java development I&rsquo;m sure you&rsquo;ve run into a situation where the logger just does not do what you want it to do.  Sometimes you can&rsquo;t get it to print messages other than <code>INFO</code> level messages, sometimes you can&rsquo;t get it to print anything to the console at all.</p>

<p>In order to get around this I have a few convenience methods that I&rsquo;ve migrated from project to project that I wanted to share.  Soon I&rsquo;ll put them in <a href="https://github.com/timmattison/jayuda">Jayuda</a> when I revamp it.  For now, you can just copy them from the blocks below.</p>

<p><strong><em>NOTE:</em></strong> All of this info is for plain <code>java.util.logging</code>.  If you are using another logging system this probably won&rsquo;t work for you.</p>

<p>The first function makes sure that there is at least one console logger in your logging system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">forceConsoleLogging</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// Get the root logger instance</span>
</span><span class='line'>    <span class="n">LogManager</span> <span class="n">logManager</span> <span class="o">=</span> <span class="n">LogManager</span><span class="o">.</span><span class="na">getLogManager</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Logger</span> <span class="n">rootLogger</span> <span class="o">=</span> <span class="n">logManager</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the default logging level to all</span>
</span><span class='line'>    <span class="n">rootLogger</span><span class="o">.</span><span class="na">setLevel</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">ALL</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Loop and see if a console handler is already installed</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">consoleHandlerInstalled</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Handler</span> <span class="n">handler</span> <span class="o">:</span> <span class="n">rootLogger</span><span class="o">.</span><span class="na">getHandlers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ConsoleHandler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">consoleHandlerInstalled</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Is a console handler already installed?</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">consoleHandlerInstalled</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Yes, do nothing</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// No console handler installed, install one</span>
</span><span class='line'>    <span class="n">rootLogger</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">ConsoleHandler</span><span class="o">());</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second function is a bit more aggressive.  It iterates over your console loggers and makes sure all of them log everything.  You can use this in a pinch when you&rsquo;re having serious issues and you need to see everything.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">logEverything</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Get the logger instance</span>
</span><span class='line'>        <span class="n">LogManager</span> <span class="n">logManager</span> <span class="o">=</span> <span class="n">LogManager</span><span class="o">.</span><span class="na">getLogManager</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Logger</span> <span class="n">rootLogger</span> <span class="o">=</span> <span class="n">logManager</span><span class="o">.</span><span class="na">getLogger</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set the default logging level to all</span>
</span><span class='line'>        <span class="n">rootLogger</span><span class="o">.</span><span class="na">setLevel</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">ALL</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Loop and see if any console handlers are already installed</span>
</span><span class='line'>        <span class="n">List</span><span class="o">&lt;</span><span class="n">ConsoleHandler</span><span class="o">&gt;</span> <span class="n">consoleHandlers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">ConsoleHandler</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">Handler</span> <span class="n">handler</span> <span class="o">:</span> <span class="n">rootLogger</span><span class="o">.</span><span class="na">getHandlers</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">handler</span> <span class="k">instanceof</span> <span class="n">ConsoleHandler</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">consoleHandlers</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">ConsoleHandler</span><span class="o">)</span> <span class="n">handler</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Is a console handler already installed?</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">consoleHandlers</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// No, create one.  Add it to the list and to the root logger.</span>
</span><span class='line'>            <span class="n">Handler</span> <span class="n">consoleHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConsoleHandler</span><span class="o">();</span>
</span><span class='line'>            <span class="n">consoleHandlers</span><span class="o">.</span><span class="na">add</span><span class="o">((</span><span class="n">ConsoleHandler</span><span class="o">)</span> <span class="n">consoleHandler</span><span class="o">);</span>
</span><span class='line'>            <span class="n">rootLogger</span><span class="o">.</span><span class="na">addHandler</span><span class="o">(</span><span class="n">consoleHandler</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Loop through all console handlers and make them log everything</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="n">ConsoleHandler</span> <span class="n">consoleHandler</span> <span class="o">:</span> <span class="n">consoleHandlers</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">consoleHandler</span><span class="o">.</span><span class="na">setLevel</span><span class="o">(</span><span class="n">Level</span><span class="o">.</span><span class="na">ALL</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you do this be prepared to see TONS of output including output from all of the libraries you use.  Most of the time this is overkill.  But sometimes when the logger just won&rsquo;t do what you want no matter how hard you try this will save your sanity.</p>

<p>Have better ways to do this?  Did this get you out of a jam?  Please post in the comments below.</p>

<p>UPDATE: <a href="https://github.com/timmattison/jayuda/commit/1484b47d72c6f5943340eebc8d78fafaa9604485">Added to Jayuda</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Collection of Software Testing and Dependency Injection Videos That All Developers Should Watch]]></title>
    <link href="http://blog.timmattison.com/archives/2014/06/19/a-collection-of-software-testing-and-dependency-injection-videos-that-all-developers-should-watch/"/>
    <updated>2014-06-19T07:06:23-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/06/19/a-collection-of-software-testing-and-dependency-injection-videos-that-all-developers-should-watch</id>
    <content type="html"><![CDATA[<p>I often get asked about what recommendations I would make to people to make them better developers.  After working on a very large project last year I have consistently told people that no matter what platform they use they should work on and think about two things: software testing and dependency injection.</p>

<p>Software testing includes unit tests, integration tests, regression tests, human testing, and a lot more.  It is a broad set of topics that is hard to distill into just a few bits that will always be applicable.</p>

<p>But how about getting people to write code that is testable?  Testability is an easy concept to gloss over.  While there is a stigma associated with writing code that has no test coverage there is nowhere near as much of a stigma for having to jump through endless hoops to get your software to be tested.  In fact, these hoops combined with time pressure are probably why a lot of developers don&rsquo;t do proper testing.</p>

<p>There are three things that you can do immediately to start writing more testable code.  First, <a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design">learn the SOLID principle</a> and if you need tighter focus then just start with S (single responsibility principle) and D (dependency inversion principle).  Second, use a <a href="https://en.wikipedia.org/wiki/Dependency_injection">dependency injection</a> framework (AKA &ldquo;DI framework&rdquo;).  Third, try to follow the <a href="https://en.wikipedia.org/wiki/Law_of_Demeter">Law of Demeter</a> as much as possible.</p>

<p>Here are some dependency injection framework recommendations:</p>

<ul>
<li>For Java developers I recommend <a href="https://code.google.com/p/google-guice/">Guice</a>.</li>
<li>For Android developers I recommend <a href="https://square.github.io/dagger/">Dagger</a>.</li>
<li>For .NET developers I recommend <a href="http://www.ninject.org/">Ninject</a>.</li>
</ul>


<p>Those Wikipedia links are only meant for basic information on the topics.  Once you&rsquo;re ready to learn about these principles you can get a serious head start by watching a few videos.  The videos by Misko Hevery are some of my favorites and they&rsquo;re 30 minutes versus 60 minutes which is a little easier to carve out of your day.  I suggest watching those first.</p>

<p>These videos are all part of the <a href="https://www.youtube.com/channel/UCtXKDgv1AVoG88PLl8nGXmw">Google Tech Talk</a> series.</p>

<p>30 minute sessions with Misko:</p>

<ul>
<li><a href="http://www.youtube.com/watch?v=RlfLCWKxHJ0">Don’t look for things</a> &ndash; Discusses how the object model of a system may be broken if you’re not directly handed what your object needs to get its job done.  In the best case this is handled automatically by dependency injection which makes it so you’re never shuffling in and out constructor argument lists as you swap implementations.</li>
<li><a href="http://www.youtube.com/watch?v=-FRm3VPhseI">Global State and Singletons</a> &ndash; Discusses how global state can silently break tests and how to try to avoid it</li>
<li><a href="http://www.youtube.com/watch?v=wEhu57pih5w">Unit Testing</a> &ndash; Discusses how unit tests should be structured and that the goal should be to have unit tests that run so fast that you’re running them all the time.  Integration tests and user simulations will still take longer but you should always try to write unit tests that run in milliseconds when possible.  An interesting fact that he drops in this talk, I think, is that Google’s set of tests for a project are often as large as or even larger than the actual project itself.</li>
<li><a href="http://www.youtube.com/watch?v=4F72VULWFvc">Inheritance, Polymorphism, &amp; Testing</a> &ndash; Discusses how dense code can be unraveled with polymorphism and how that can make it easier to test and get complete testing coverage</li>
</ul>


<p>60 minute sessions:</p>

<ul>
<li><a href="http://www.youtube.com/watch?v=hBVJbzAagfs">Big Modular Java with Guice</a> &ndash; Discusses how to use Guice to write maintainable, large Java projects</li>
<li><a href="http://www.youtube.com/watch?v=0iSB0L9avmg">Java on Guice: Dependency Injection, the Java Way</a> &ndash; One of the earlier Guice talks that compares and contrasts using Guice with the non-DI way</li>
<li><a href="https://www.youtube.com/watch?v=XcT4yYu_TTs">How to Write Clean, Testable Code</a> &ndash; Discusses the Law of Demeter, and getting buried in setup code</li>
</ul>


<p>Have any other recommendations?  Please post them in the comments below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Use Git to Figure Out What You Did Yesterday]]></title>
    <link href="http://blog.timmattison.com/archives/2014/06/18/use-git-to-figure-out-what-you-did-yesterday/"/>
    <updated>2014-06-18T09:10:21-04:00</updated>
    <id>http://blog.timmattison.com/archives/2014/06/18/use-git-to-figure-out-what-you-did-yesterday</id>
    <content type="html"><![CDATA[<p>Are you a developer?  Do you have trouble remembering what you did yesterday when it is time for your daily standup?  Do you use git?  Do you commit regularly?  If you answered yes to those questions you can now quickly figure out what you did yesterday with the help of <a href="https://github.com/timmattison/gitrdun">gitrdun</a>.</p>

<p>gitrdun simply looks for git repos in your home directory, lists all of the commits in those repos from yesterday, and then prints that on the screen.  The current iteration is the &ldquo;5 minute version&rdquo;.  It literally took 5 minutes to write.  The &ldquo;5 hour version&rdquo; may make the formatting a bit nicer and add some features but don&rsquo;t hold your breath for that to come out.</p>

<p>Don&rsquo;t want to fork the repo?  No problem, it&rsquo;s just a one liner anyway.  Use this alias&hellip;</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>alias gitrdun="clear ; PAGER=\"cat\" find ~ -name \".git\" -type d -exec sh -c \"cd '{}' ; echo '{}'; git log --all --since='yesterday'\" \; | less"</span></code></pre></td></tr></table></div></figure>


<p>This clears the screen, uses &ldquo;cat&rdquo; as the pager so that the pager doesn&rsquo;t clear the screen between repo checks, finds all git repos, goes into their directory that is under version control, and then lists all commits on all branches from yesterday.</p>

<p>Enjoy!</p>
]]></content>
  </entry>
  
</feed>
